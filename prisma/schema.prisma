// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// prisma/schema.prisma
model Tenant {
  id                        String                     @id @default(cuid())
  taxId                     String                     @unique
  name                      String
  subdomain                 String                     @unique
  status                    String                     @default("active")
  plan                      String                     @default("free")
  email                     String
  tradeName                 String?
  establishmentNumber       String?
  accountingRequired        Boolean?
  specialTaxpayer           Boolean?
  largeTaxpayer             Boolean?
  rimpeRegimeTaxpayer       Boolean?
  rimpe                     String?
  withholdingAgent          Boolean?
  city                      String?
  phone                     String?
  address                   String?
  logo                      String?
  createdAt                 DateTime                   @default(now())
  issuancePoint             IssuancePoint[]
  memberships               Memberships[]
  ElectronicInvoicingConfig ElectronicInvoicingConfig?
}

model User {
  id          String        @id @default(cuid())
  email       String        @unique
  name        String?
  password    String?
  status      String        @default("active")
  createdAt   DateTime      @default(now())
  memberships Memberships[]
}

model Memberships {
  id        String   @id @default(cuid())
  userId    String
  tenantId  String
  role      String   @default("user")
  invitedBy String?
  status    String   @default("pending")
  user      User     @relation(fields: [userId], references: [id])
  tenant    Tenant   @relation(fields: [tenantId], references: [id])
  createdAt DateTime @default(now())
}

model RecoveryPassword {
  id        String   @id @default(cuid())
  email     String
  hash      String
  createdAt DateTime @default(now())
  expiresAt DateTime
}

model ElectronicInvoicingConfig {
  id                    String          @id @default(cuid())
  tenantId              String          @unique
  digitalCertificate    Bytes // .p12 file stored as binary
  certificatePassword   String
  certificateExpiryDate DateTime
  issuancePoints        IssuancePoint[] // related issuance points
  tenant                Tenant          @relation(fields: [tenantId], references: [id])
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
}

model IssuancePoint {
  id             String                    @id @default(cuid())
  documentType   DocumentType
  pointOfSale    String
  organizationId String
  configId       String
  config         ElectronicInvoicingConfig @relation(fields: [configId], references: [id])
  createdAt      DateTime                  @default(now())
  Tenant         Tenant?                   @relation(fields: [tenantId], references: [id])
  tenantId       String?
}

enum DocumentType {
  INVOICE
  CREDIT_NOTE
  WITHHOLDING
  DELIVERY_NOTE
  DEBIT_NOTE
}
